<!--  This script will not be uploaded to the server.
      PLEASE DO NOT MODIFY 
      If you modify this script it is likely that the build will not work on the server
-->
<project name="Build Facade" default="main">
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${basedir}/build-files/automatedTests/ant-contrib.jar" />


    <typedef resource="svntask.properties"/>

	<!-- = = = = = = = = = = = = = = = = =
          macrodef: get-feature-version          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="get-feature-version" description="Retrieves the version of a feature from an eclipse updatesite">
        <attribute name="feature"/>
        <attribute name="url"/>
        <attribute name="eclipseDir"/>
        <sequential>
        	<tempfile property="feature.info.file"/>
        	<java fork="yes" classname="org.eclipse.core.launcher.Main" output="${feature.info.file}" 
				errorproperty="@{feature}.feature.error">
				<classpath>
					<pathelement location="@{eclipseDir}/startup.jar"/>
				</classpath>
				<arg value="-application"/>
				<arg value="org.eclipse.update.core.standaloneUpdate"/>
				<arg value="-command"/>
				<arg value="search"/>
				<arg value="-from"/>
				<arg value="@{url}"/>
			</java>
        	<!-- Using file based filters to be 1.6.5 compatible -->

        	<tempfile property="feature.version.file"/>
			<copy file="${feature.info.file}" tofile="${feature.version.file}">
				<filterchain>
					<linecontains>
						<contains value="@{feature} "/>
					</linecontains>
					<tokenfilter>
						<replaceregex pattern='".*" @{feature} (.*)' replace="\1"/>
					</tokenfilter>
					<striplinebreaks/>
				</filterchain>
			</copy>
        	<loadfile property="@{feature}.version" srcfile="${feature.version.file}"></loadfile>
        	<delete file="${feature.info.file}"/>
        	<delete file="${feature.version.file}"/>
        </sequential>
    </macrodef>

	<target name="test-get-feature-version" depends="-properties">
        <get-feature-version feature="com.aptana.ide.feature" url="${aptana.update.url}" eclipseDir="${eclipseDir}"/>
		<echo message="DEBUG studio build number is - ${com.aptana.ide.feature.version}"/>
	</target>


	<target name="-extractEclipse">
		<if>
			<os family="windows" />
			<then>
				<unzip dest="${buildDirectory}" src="${test.eclipse.zip}" />
			</then>
			<else>
				<untar dest="${buildDirectory}" src="${test.eclipse.zip}" compression="gzip" />
			</else>
		</if>
	</target>

	<target name="-properties">
		<!-- versioning -->
		<property name="build.version" value="HEAD" />
		<property file="releases/${build.version}.properties" />
		<tstamp>
			<format property="version.qualifier" pattern="yyyyMMddHHmm" timezone="GMT" unit="minute" />
		</tstamp>
		<property name="buildHome" value="${basedir}" />

		<property name="buildTypePresentation" value="" />
		<property name="version.full" value="${version}.${version.qualifier}${buildTypePresentation}" />

		<!-- includes -->
		<property file="build_local.properties" />
		<property file="pluginbuilder.config" />

		<property name="buildResultsDirectory" value="${buildDirectory}/results" />
		
		<if>
			<os family="windows" />
			<then>
				<property name="eclipse.partial.name" value="eclipse-SDK-3.2.2-win32.zip" />
			</then>
			<!-- TODO We need to include the right archive for whatever platforms we plan to try and build on -->
			<else>
				<property name="eclipse.partial.name" value="eclipse-SDK-3.2.2-${os}-${ws}.tar.gz" />
			</else>
		</if>
		<property name="test.eclipse.zip" value="${buildHome}/build-files/${eclipse.partial.name}" />
		<property name="eclipseDir" value="${buildDirectory}/eclipse" />
		
		<property name="aptana.update.url" value="http://127.0.0.1/update/trunk/3.2/" />
		<property name="radrails.update.url" value="http://127.0.0.1/update/trunk/rails/3.2" />
		<property name="rdt.update.url" value="http://127.0.0.1/update/trunk/rdt/3.2" />
		<!--
		<property name="aptana.update.url" value="http://update.aptana.com/update/3.2" />
		<property name="radrails.update.url" value="http://update.aptana.com/update/rails/3.2" /> 
		<property name="rdt.update.url" value="http://update.aptana.com/update/trunk/rdt/3.2" />
		-->

		<!-- set defaults -->
		<property name="buildTarget" value="main" />
		<property name="verboseAnt" value="-Ddummy=true" />

		<!-- check if clean should be called -->
		<condition property="is.clean">
			<or>
				<equals arg1="main" arg2="${buildTarget}" trim="true" />
				<equals arg1="fetch" arg2="${buildTarget}" trim="true" />
			</or>
		</condition>
	</target>
	
	<!-- ================================= 
          target: get-aptana-version              
         ================================= -->
	
	<target name="-installAptanaPlugins">
        <get-feature-version feature="com.aptana.ide.feature" url="${aptana.update.url}" eclipseDir="${eclipseDir}"/>
		<echo level="verbose" message="DEBUG build number is - ${com.aptana.ide.feature.version}"/>
		<antcall target="-installFeatureViaUpdateSite">
			<param name="updatesite.url" value="${aptana.update.url}"/>
			<param name="feature.id" value="com.aptana.ide.feature"/>
			<param name="feature.version" value="${com.aptana.ide.feature.version}"/>
		</antcall>
	</target>

	<target name="-installRDT">
        <get-feature-version feature="org.rubypeople.rdt" url="${rdt.update.url}" eclipseDir="${eclipseDir}"/>
		<antcall target="-installFeatureViaUpdateSite">
			<param name="updatesite.url" value="${rdt.update.url}"/>
			<param name="feature.id" value="org.rubypeople.rdt"/>
			<param name="feature.version" value="${org.rubypeople.rdt.version}"/>
		</antcall>
	</target>
	
	<!-- http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.platform.doc.isv/reference/misc/update_standalone.html -->
    <target name="-installFeatureViaUpdateSite">
    	<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
    		<arg value="-application" />
    		<arg value="org.eclipse.update.core.standaloneUpdate" />
    		<arg value="-command" />
    		<arg value="install" />
    		<arg value="-from" />
    		<arg value="${updatesite.url}" />
    		<arg value="-featureId" />
    		<arg value="${feature.id}" />
    		<arg value="-version" />
    		<arg value="${feature.version}" />
	        <arg value="-data" />
			<arg value="${buildDirectory}/workspace" />
    		<classpath>
    			<pathelement location="${eclipseDir}/startup.jar" />
    		</classpath>
    	</java>
    </target>


	<target name="-setupEclipseBuildHost">
		<!-- extract test eclipse zip into a temporary location so we can use that as build host -->
		<!-- FIXME only do this if there's no build host already available at ${eclipseDir}? -->
		<antcall target="-extractEclipse" />

		<available type="dir" file="${eclipseDir}/plugins" property="eclipseDir.plugins.exists" />
		<fail message="Could not find directory ${eclipseDir}/plugins. Please check eclipseDir in build_local.properties" unless="eclipseDir.plugins.exists" />

		<!-- determine buildfile -->
		<fileset dir="${eclipseDir}/plugins" includes="org.eclipse.pde.build_*/scripts/build.xml" id="pde.plugin.path" />
		<pathconvert property="buildfile" refid="pde.plugin.path" />
		<fail message="Could not find org.eclipse.pde.build_*/scripts/build.xml in ${eclipseDir}/plugins. PDE not installed?" unless="buildfile" />

		<antcall target="-installRDT" />
		<antcall target="-installAptanaPlugins" />

	</target>

	<target name="-clean" if="is.clean">
		<echo level="info" message="Cleaning directory ${buildDirectory}" />
		<delete dir="${buildDirectory}" verbose="false" />
		<mkdir dir="${buildDirectory}" />
	</target>

	<target name="-build" depends="-properties,-clean,-setupEclipseBuildHost">
		<property name="buildResultsDirectory" value="${buildDirectory}/results" />
		<java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
			<arg value="-ws" />
			<arg value="${ws}" />
			<arg value="-os" />
			<arg value="${os}" />
			<arg value="-application" />
			<arg value="org.eclipse.ant.core.antRunner" />
			<arg value="-buildfile" />
			<arg value="${buildfile}" />
			<arg value="${buildTarget}" />
			<arg value="-data" />
			<arg value="${buildDirectory}/workspace" />
			<arg value="${verboseAnt}" />
			<jvmarg value="-Dbasews=${ws}" />
			<jvmarg value="-Dbaseos=${os}" />
			<jvmarg value="-Dbasearch=${arch}" />
			<jvmarg value="-Dbuilder=${buildHome}/build-files" />
			<jvmarg value="-DjavacFailOnError=true" />
			<jvmarg value="-DbuildDirectory=${buildDirectory}" />
			<jvmarg value="-DbuildResultsDirectory=${buildResultsDirectory}" />
			<jvmarg value="-DbaseLocation=${eclipseDir}" />
			<jvmarg value="-DbuildHome=${buildHome}" />
			<jvmarg value="-Dversion.full=${version.full}" />
			<jvmarg value="-Dversion.qualifier=${version.qualifier}" />
			<jvmarg value="-DbuildType=${buildType}" />
			<jvmarg value="-DfetchTag=${fetchTag}" />
			<jvmarg value="-Dtest.eclipse.zip=${test.eclipse.zip}" />

			<classpath>
				<pathelement location="${eclipseDir}/startup.jar" />
			</classpath>
		</java>
                <!-- write a version.txt file in build directory -->
                <concat destfile="${buildDirectory}/version.txt">version.full=${version.full}</concat>
	</target>

	<target name="main-cc" depends="-properties" description="This target is suited to be run from cruisecontrol. The property 'label' is expected to be set from cruisecontrol.">
		<!-- TODO: extract qualifier correctly from label -->
		<antcall target="-build"/>
		<property file="${buildDirectory}/version.txt"/>
		<property name="version.qualifier" value="${version.full}" />
		<antcall target="deploy-artifacts"/>
	</target>

	<target name="main-update" description="Run the main target of customTargets.xml.">
		<antcall target="update-self" />
		<antcall target="main" />
	</target>
	
	<target name="main" description="Run the main target of customTargets.xml.">
		<property name="buildTarget" value="main" />
		<antcall target="-build" />
	</target>

	<target name="fetch" description="Run the fetch target of customTargets.xml.">
		<property name="buildTarget" value="fetch" />
		<antcall target="-build" />
	</target>

	<target name="generate" description="Run the generate target of customTargets.xml.">
		<property name="buildTarget" value="generate" />
		<antcall target="-build" />
	</target>

	<target name="process" description="Run the process target of customTargets.xml.">
		<property name="buildTarget" value="process" />
		<antcall target="-build" />
	</target>

	<target name="assemble" description="Run the assemble target of customTargets.xml.">
		<property name="buildTarget" value="assemble" />
		<antcall target="-build" />
	</target>

	<target name="postBuild" description="Run the postBuild target of customTargets.xml.">
		<property name="buildTarget" value="postBuild" />
		<antcall target="-build" />
	</target>

	<!-- ================================= 
          target: deploy-artifacts              
         ================================= -->
    <target name="deploy-artifacts" depends="" if="deployDirectory" 
    		description="Pushes build to cruisecontrol artifacts directory">
        <mkdir dir="${deployDirectory}/${version.full}"/>
    	<copy todir="${deployDirectory}/${version.full}">
			<fileset dir="${buildResultsDirectory}/updateSite">
				<exclude name="site.xml" />
			</fileset>
    	</copy>

		<antcall target="echo.time"><param name="target.name" value="deploy-artifacts" /></antcall>
    	<echo message="copy ${deployDirectory}/${version.full} to ${buildResultsDirectory}/updateSite" />
    	
    	<antcall target="copy-to-web"><param name="scs.branch.name" value="trunk" /></antcall>	   
    	<antcall target="copy-to-web"><param name="scs.branch.name" value="aptana_studio_1.0.0" /></antcall>	   
 
    </target>

	<target name="copy-to-web">
		<property name="web.directory" value="/var/www/hosts/dev/html/" />
		<property name="eclipse.version" value="3.2" />

		<echo message="${deployDirectory}/${version.full}/com.aptana.radrails.feature.professional/ to ${web.directory}update/${scs.branch.name}/rails_pro/${eclipse.version}" />
			<delete dir="${web.directory}update/${scs.branch.name}/rails_pro/${eclipse.version}" failonerror="false" />
			<mkdir dir="${web.directory}update/${scs.branch.name}/rails_pro/${eclipse.version}" />
	    	<echo message="copy ${deployDirectory}/${version.full} to ${buildResultsDirectory}/updateSite" />
			<copy todir="${web.directory}update/${scs.branch.name}/rails_pro/${eclipse.version}" failonerror="true">
			  	<fileset dir="${deployDirectory}/${version.full}/com.aptana.radrails.feature.professional/" />
			</copy>		
	</target>

	<target name="echo.time">
	  	<tstamp>
		  	<format property="start" pattern="yyyy MMMM dd HH:mm:ss" locale="en"/>
	  	</tstamp>
	  	<echo message="${start}: Started ${target.name}" />
	</target>

	<target name="update-self">
		<svn javahl="false">
			<update dir="."/>
                </svn>
	</target>

	<target name="test-svn">
		<svn javahl="false">
			<checkout url="https://source.aptana.com/aptanarepo/aptana/ide_suite/branches/aptana_studio_1.0.0/ide_core/doc/tutorials/src" destPath="/tmp/foo"/>
		</svn>
	</target>


</project>
