<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Sep 1, 2009                                                        

     RadRails    
     Builds the RadRails RCP feature
                   
     cwilliams                                                                
     ====================================================================== -->
<project name="RadRails-RCP" default="build">
	<description>
            Builds the RadRails RCP feature
    </description>

	<property environment="env"/>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="lib/ant-contrib-0.6.jar" />
		</classpath>
	</taskdef>

	<property file="build_local.properties" />

	<!-- ================================= 
          target: build              
         ================================= -->
	<target name="build" description="Builds the RadRails RCP" depends="generate.build.properties,get.revision,replace.versions,generate.base">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/productBuild/productBuild.xml -Dbuilder=${basedir} -Dbuild.revision=${build.revision} -Dstudio.version=${studio.version} -nosplash" />
		</java>
		<antcall target="clean.after" />
	</target>

	<!-- ================================= 
          target: generate.build.properties              
         ================================= -->
	<target name="generate.build.properties" description="Takes in properties from build_local.properties and the command line overrides and generates a combined build.properties to use for the build">
		<echoproperties destfile="build.properties">
			<propertyset negate="true">
				<propertyref prefix="java." />
				<propertyref prefix="ant." />
				<propertyref prefix="awt." />
				<propertyref prefix="user." />
				<propertyref prefix="sun." />
			</propertyset>
		</echoproperties>
	</target>

	<!-- ================================= 
	      target: clean              
	     ================================= -->
	<target name="clean" depends="generate.build.properties" description="Clean up temp and build files">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="false">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/productBuild/productBuild.xml -Dbuilder=${basedir} -nosplash clean" />
		</java>
		<delete dir="${baseLocation}" />
		<delete dir="${buildDirectory}/features/org.eclipse.pde.build.container.feature" failonerror="false" />
		<delete file="build.properties" failonerror="false" />
		<delete failonerror="false">
			<fileset dir="${buildDirectory}" defaultexcludes="true">
				<include name="assemble.*" />
				<include name="finalFeaturesVersions.*" />
				<include name="finalPluginsVersions.*" />
				<include name="package.*" />
			</fileset>
		</delete>
		<delete dir="${buildDirectory}/${buildLabel}" failonerror="false" />
		<delete dir="${p2.repo.dir}" failonerror="false" />
		<!-- Do an git checkout of the build directory -->
		<exec executable="/bin/bash" dir="${buildDirectory}">
			<arg value="-c" />
			<arg value="${git.executable} checkout -f" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: clean.after                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="clean.after" if="cleanAfter">
		<antcall target="clean" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	          target: generate.base                      
	         - - - - - - - - - - - - - - - - - -->
	<target name="generate.base" depends="copy.base.windows,copy.base">
		<!-- Copy the features and plugins over into a dropins folder. Installing makes it so that non-linux plugins/features won't be there! -->
		<mkdir dir="${baseLocation}/dropins/eclipse" />
		<copy todir="${baseLocation}/dropins/eclipse">
			<fileset dir="${ide-core.p2.repo}" defaultexcludes="true">
				<include name="features/*" />
				<include name="plugins/*" />
			</fileset>
		</copy>
		<!--
		While we are building against aptana_studio_1.5 branch we have to install pro features to pick up SecureFTP. 
		-->
		<copy todir="${baseLocation}/dropins/eclipse">
			<fileset dir="${ide-pro.p2.repo}" defaultexcludes="true">
				<include name="features/*" />
				<include name="plugins/*" />
			</fileset>
		</copy>
		<pathconvert property="studio.version">
			<fileset dir="${baseLocation}/dropins/eclipse/features">
				<include name="com.aptana.ide.feature_*.jar" />
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="com.aptana.ide.feature_*.jar" to="*" casesensitive="yes" />
				</chainedmapper>
			</mapper>
		</pathconvert>

		<!-- Unjar the features -->
		<for param="file">
			<path>
				<fileset dir="${baseLocation}/dropins/eclipse/features" defaultexcludes="true">
					<include name="*.jar" />
				</fileset>
			</path>
			<sequential>
				<echo message="Unzipping JAR @{file}" />
				<basename file="@{file}" property="@{file}.name" suffix="jar" />
				<mkdir dir="${baseLocation}/dropins/eclipse/features/${@{file}.name}" />
				<unjar dest="${baseLocation}/dropins/eclipse/features/${@{file}.name}" src="@{file}" />
				<delete file="@{file}" />
				<echo message="Replacing the update site domain names." />
				<!-- The following will replace update.aptana.org update/... sites with download.aptana.com/... update sites -->
				<replaceregexp file="${baseLocation}/dropins/eclipse/features/${@{file}.name}/feature.xml" match="http://update.aptana.com/update/" replace="http://download.aptana.com/tools/studio/plugin/" byline="true" />
				<!-- The following will replace aptana.org update sites with aptana.com update sites -->
				<replaceregexp file="${baseLocation}/dropins/eclipse/features/${@{file}.name}/feature.xml" match="http://download.aptana.org/tools/studio/plugin/" replace="http://download.aptana.com/tools/studio/plugin/" byline="true" />
			</sequential>
		</for>
		<!-- UnJAR the handful of plugins that we need to... -->
		<for param="file">
			<path>
				<fileset dir="${baseLocation}/dropins/eclipse/plugins" defaultexcludes="true">
					<include name="org.mozilla.rhino_*.jar" />
					<include name="org.eclipse.atf.mozilla.ide.core_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser.carbon.macosx_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser.win32.win32.x86_*.jar" />
					<include name="org.mozilla.xulrunner.macosx_*.jar" />
					<include name="org.mozilla.xulrunner.win32.win32.x86_*.jar" />
					<include name="org.mozilla.xpcom_*.jar" />
					<include name="com.aptana.ide.desktop.integration.protocolhandler_*.jar" />
					<include name="com.aptana.ide.syncing_*.jar" />
					<include name="com.aptana.ide.branding_*.jar" />
					<include name="com.aptana.ide.core.win32_*.jar" />
					<include name="com.aptana.ide.libraries_*.jar" />
					<include name="com.aptana.ide.libraries.jetty_*.jar" />
					<include name="com.aptana.ide.libraries.subscription_*.jar" />
					<include name="com.aptana.ide.server.jetty_*.jar" />
					<include name="com.aptana.ide.js.docgen_*.jar" />
					<include name="org.eclipse.eclipsemonkey_*.jar" />
				</fileset>
			</path>
			<sequential>
				<echo message="Unzipping JAR @{file}" />
				<basename file="@{file}" property="@{file}.name" suffix="jar" />
				<mkdir dir="${baseLocation}/dropins/eclipse/plugins/${@{file}.name}" />
				<unjar dest="${baseLocation}/dropins/eclipse/plugins/${@{file}.name}" src="@{file}" />
				<delete file="@{file}" />
			</sequential>
		</for>
			<if>
						<isset property="dbtools.p2.repo" />
						<then>
							<property name="gef.p2.repo" value="file:${basedir}/gef/site.xml" />
							<antcall target="run.director">
								<param name="p2.installIU" value="org.eclipse.gef.feature.group" />
								<param name="p2.repo" value="${gef.p2.repo}" />
							</antcall>
							<antcall target="run.director">
								<param name="p2.installIU" value="com.aptana.ide.feature.db.feature.group" />
								<param name="p2.repo" value="${dbtools.p2.repo}" />
							</antcall>
						</then>
					</if>
					<antcall target="run.director">
						<param name="p2.installIU" value="com.aptana.ide.feature.server.cloud.feature.group" />
						<param name="p2.repo" value="${cloud.p2.repo}" />
					</antcall>
					<!-- RDT is special because we re-package it in RadRails. So we can't just install it, since it won't have the non linux os specific plugins -->
					<!-- install and then copy plugins over top too?! -->
					<antcall target="run.director">
						<param name="p2.installIU" value="org.rubypeople.rdt.feature.group" />
						<param name="p2.repo" value="${rdt.p2.repo}" />
					</antcall>
					<copy todir="${baseLocation}/plugins">
						<fileset dir="${rdt.dir}/plugins" defaultexcludes="false">
							<exclude name="org.jruby_*" />
						</fileset>
					</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
		          target: copy.base                      
		         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base" unless="is.windows">
		<!-- Copy over the original base eclipse to a new location.
							Have to use exec cp to retain permissions on *nix, Mac -->
		<exec executable="cp">
			<arg line="-R ${vanilla.eclipse} ${baseLocation}" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	          target: copy.base.windows                      
	         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base.windows" if="is.windows">
		<copy todir="${baseLocation}">
			<fileset dir="${vanilla.eclipse}" includes="**/*" defaultexcludes="false" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: get.revision                      
         - - - - - - - - - - - - - - - - - -->
	<target name="get.revision">
		<echo message="Retrieving Git timestamp for latest revision" level="info" />
		<exec executable="/bin/bash" dir="${basedir}" outputproperty="git.revision.max">
			<arg value="-c" />
			<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct'" />
		</exec>
		<property name="build.revision" value="${git.revision.max}" />
		<echo message="Revision timestamp: ${build.revision}" level="info" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
	      target: replace.versions
	     - - - - - - - - - - - - - - - - - -->
	<target name="replace.versions" description="Replaces all the qualifiers for plugins/features with the last changed rev for that plugin/feature.">
		<!-- Iterate through every plugin and feature directory and replace qualifier in
		        build.properties with qualifier for just that plugin/feature! -->
		<!-- TODO Handle if build.properties has no qualifier entry! -->
		<for param="file">
			<path>
				<dirset dir="${buildDirectory}" defaultexcludes="true">
					<include name="plugins/*" />
					<include name="features/*" />
					<exclude name="${topLevelElementType}s/${topLevelElementId}" />
				</dirset>
			</path>
			<sequential>
				<exec executable="/bin/bash" dir="@{file}" outputproperty="@{file}.committed.max">
					<arg value="-c" />
					<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct' ." />
				</exec>
				<echo message="Replacing qualifier for @{file} with ${@{file}.committed.max}" />
				<replaceregexp file="@{file}/build.properties" match="qualifier\s*=\s*context" replace="qualifier = ${@{file}.committed.max}" byline="true" />
			</sequential>
		</for>
	</target>

	<target name="touch-info">
		<touch file="build_number.${env.BUILD_NUMBER}"/>
		<touch file="build_id.${env.BUILD_ID}"/>
		<touch file="build_tag.${env.BUILD_TAG}"/>
	</target>

	<target name="create-artifact-symlink">
		<exec executable="unlink">
			<arg value="${env.WORKSPACE}/build-artifacts" />
		</exec>
		<symlink link="${env.WORKSPACE}/build-artifacts" resource="${deploy.dir}" failonerror="false"/>
	</target>
</project>
